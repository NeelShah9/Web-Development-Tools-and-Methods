{"version":3,"sources":["spinner.svg","context/AgendaContext.js","LandingPage.jsx","Theme.jsx","Sort.jsx","Filter.jsx","context/Constants.js","Agendas.jsx","Login.jsx","Home.jsx","App.jsx","serviceWorker.js","context/AgendaReducer.js","context/types.js","services.js","messages.js","context/AgendaState.js","index.js"],"names":["module","exports","AgendaContext","React","createContext","LandingPage","agendaContext","useContext","className","networkError","isLoggedIn","onClick","setLogout","Theme","useEffect","getTheme","username","value","theme","onChange","e","themeVal","target","setTheme","Sort","taskOrderFilter","sortTasksByOrder","disabled","taskDoneFilter","sortTasksByDone","Filter","taskStatusFilter","filterTasksByStatus","constants","DONE","ALL","SELECT","ACTIVE","COMPLETE","ASCENDING","DESCENDING","NOTDONE","DEFAULT_THEME","TRUE","FALSE","Agendas","useState","task","setTask","getAllTasks","performToggleTodo","toggleTodo","id","performDeleteTask","deleteTask","performUpdateTask","updateTask","type","placeholder","preventDefault","addNewTask","refreshTasks","Object","values","tasks","filter","done","map","index","key","taskId","checked","name","contentEditable","Login","setUsername","isLoading","setIsLoading","alt","src","spinner","setLoginStatus","Home","content","getLoginStatus","toUpperCase","error","App","Boolean","window","location","hostname","match","state","action","data","status","convertNetworkError","err","code","checkResponse","response","ok","json","then","Promise","reject","fetchUpdateTask","fetch","method","headers","Headers","body","JSON","stringify","catch","messages","DEFAULT","USERNAME_REQUIRED","NETWORK_ERROR","TODO_REQUIRED","AgendaState","props","initialState","useReducer","AgendaReducer","dispatch","removeTaskByKey","assign","entries","k","v","sortTasksByAsc","sort","a","b","sortTasksByDesc","getObjectList","list","reduce","obj","item","sortByDone","sortByNotDone","Provider","userInfo","fetchLogin","fetchUpdateTheme","fetchTheme","themeInfo","fetchAllTasks","taskInfo","taskName","fetchAddTasks","message","remove","text","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7ec95a95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.a50cf914.svg\";","import React from 'react';\n\nconst AgendaContext = React.createContext({});\n\nexport default AgendaContext;","import React, { useContext } from 'react';\n\nimport AgendaContext from './context/AgendaContext';\n\nconst LandingPage = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  const logout = () => {\n    agendaContext.setLogout();\n  };\n\n  return (\n    <div>\n      <div className=\"header\">AGENDA TRACKER</div>\n      <div className=\"error-msg\">{agendaContext.networkError}</div>\n      <ul className=\"landing\">\n        {agendaContext.isLoggedIn && (\n          <button className=\"logout action\" onClick={logout}>\n            Logout\n          </button>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import React, { useEffect, useContext } from 'react';\nimport AgendaContext from './context/AgendaContext';\n\nconst Theme = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  useEffect(() => {\n    agendaContext.getTheme(agendaContext.username);\n\n  }, []);\n\n  const changeTheme = (e) => {\n    let themeVal = e.target.value;\n    agendaContext.setTheme(agendaContext.username, themeVal);\n  };\n  return (\n  \n    <select className=\"theme\" value={agendaContext.theme} onChange={changeTheme}>\n      <option value=\"light\">Light</option>\n      <option value=\"dark\">Dark</option>\n      <option value=\"colorful\">Tints</option>\n    </select>\n  \n  );\n};\n\nexport default Theme;\n","import React, { useContext } from 'react';\nimport AgendaContext from './context/AgendaContext';\n\nconst Sort = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  const sortTasksByOrder = (e) => {\n    agendaContext.sortTasksByOrder(e.target.value);\n  };\n\n  const sortTasksByDone = (e) => {\n    agendaContext.sortTasksByDone(e.target.value);\n  };\n\n  return (\n    <span className=\"sort-container\">\n      <label className=\"task-sort-label\">Sort:</label>\n      <span className=\"select-sort\">\n        <label>Alphabetically</label>\n        <select\n          className=\"sort-alphabetically filter-height\"\n          value={agendaContext.taskOrderFilter}\n          onChange={sortTasksByOrder}\n        >\n          <option value=\"select option\" disabled>\n            Select\n          </option>\n          <option value=\"ascending\">Forward</option>\n          <option value=\"descending\">Reverse</option>\n        </select>\n        <label>Complete/Pending</label>\n        <select\n          className=\"sort-by-status filter-height\"\n          value={agendaContext.taskDoneFilter}\n          onChange={sortTasksByDone}\n        >\n          <option value=\"select option\" disabled>\n            Select\n          </option>\n          <option value=\"done\">Complete</option>\n          <option value=\"notdone\">Pending</option>\n        </select>\n      </span>\n    </span>\n  );\n};\n\nexport default Sort;\n","import React, { useContext } from 'react';\nimport AgendaContext from './context/AgendaContext';\nimport Sort from './Sort';\n\nconst Filter = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  const filterTasksByStatus = (e) => {\n    agendaContext.filterTasksByStatus(e.target.value);\n  };\n\n  return (\n    <div className=\"filter-todos\">\n      <span className=\"filter-container\">\n        <label className=\"task-filter-label\">Filter By:</label>\n        <select\n          className=\"filter-task filter-height\"\n          value={agendaContext.taskStatusFilter}\n          onChange={filterTasksByStatus}\n        >\n          <option value=\"all\">All Tasks</option>\n          <option value=\"active\">Active Tasks</option>\n          <option value=\"complete\">Complete Tasks</option>\n        </select>\n      </span>\n      <Sort />\n    </div>\n  );\n};\n\nexport default Filter;\n","const constants = {\n    DONE: 'done',\n    ALL: 'all',\n    SELECT: 'select option',\n    ACTIVE: 'active',\n    COMPLETE: 'complete',\n    ASCENDING: 'ascending',\n    DESCENDING: 'descending',\n    NOTDONE: 'notdone',\n    DEFAULT_THEME: 'light',\n    TRUE: true,\n    FALSE: false\n}\n\nexport default constants;","import React, { useState, useEffect, useContext } from 'react';\nimport AgendaContext from './context/AgendaContext';\nimport Filter from './Filter';\nimport constants from './context/Constants';\n\nconst Agendas = () => {\n  const agendaContext = useContext(AgendaContext);\n  const [task, setTask] = useState('');\n\n  useEffect(() => {\n    agendaContext.getAllTasks(agendaContext.username);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const performAddTask = (e) => {\n    e.preventDefault();\n\n    agendaContext.addNewTask(agendaContext.username, task);\n    setTask('');\n  };\n\n  const onChange = (e) => setTask(e.target.value);\n\n  const performToggleTodo = (e) => {\n    agendaContext.toggleTodo(e.target.id);\n  };\n\n  const performDeleteTask = (e) => {\n    agendaContext.deleteTask(e.target.id);\n  };\n\n  const performUpdateTask = (e) => {\n    agendaContext.updateTask(e.target.id, e.target.value);\n  };\n\n  const performRefreshTask = () => {\n    agendaContext.getAllTasks(agendaContext.username);\n    agendaContext.refreshTasks();\n  };\n\n  return (\n    <div>\n      <div className=\"todo-container\">\n        <Filter />\n        <div className=\"add-todo-container\">\n          <input\n            className=\"todo-input\"\n            onChange={onChange}\n            value={task}\n            type=\"text\"\n            placeholder=\"Enter Tasks\"\n          />\n          <button className=\"btn-todo-add\" onClick={performAddTask}>\n            ADD\n          </button>\n          <button className=\"btn-refresh\" onClick={performRefreshTask}>\n            Refresh\n          </button>\n          <div className=\"todo-display\">\n            <ul>\n              {Object.values(agendaContext.tasks)\n                .filter((task) =>\n                  agendaContext.taskStatusFilter === constants.COMPLETE\n                    ? task.done === constants.TRUE\n                    : constants.TRUE\n                )\n                .filter((task) =>\n                  agendaContext.taskStatusFilter === constants.ACTIVE\n                    ? task.done === constants.FALSE\n                    : constants.TRUE\n                )\n                .map((task, index) => (\n                  <li key={index}>\n                    <input\n                      id={task.taskId}\n                      className=\"todo-checkbox\"\n                      type=\"checkbox\"\n                      checked={task.done ? 'checked' : ''}\n                      onChange={performToggleTodo}\n                    />\n                    <input\n                      type=\"text\"\n                      id={task.taskId}\n                      className={`todo ${task.done ? 'todo complete' : 'todo'}`}\n                      value={task.name}\n                      onChange={performUpdateTask}\n                      contentEditable=\"true\"\n                    />\n\n                    <button\n                      id={task.taskId}\n                      className=\"task-delete\"\n                      onClick={performDeleteTask}\n                    >\n                      DELETE\n                    </button>\n                  </li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Agendas;\n","import React, { useState, useContext } from 'react';\nimport spinner from './spinner.svg';\nimport AgendaContext from './context/AgendaContext';\nconst Login = () => {\n  const agendaContext = useContext(AgendaContext);\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const performLogin = () => {\n    setIsLoading(true);\n    agendaContext.setLoginStatus(username);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"login\">\n      <input\n        className=\"user-info\"\n        placeholder=\"Enter User name\"\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      {isLoading ? (\n        <img alt=\"spinner\" src={spinner} />\n      ) : (\n        <button className=\"to-login\" onClick={performLogin}>\n          Login\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useContext, useEffect } from 'react';\nimport AgendaContext from './context/AgendaContext';\nimport Theme from './Theme';\nimport Agendas from './Agendas';\nimport Login from './Login';\n\nconst Home = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  useEffect(\n    () => {\n      agendaContext.getLoginStatus();\n    },\n\n    []\n  );\n\n  let content;\n\n  if (agendaContext.isLoggedIn) {\n    content = (\n      <>\n        <div className=\"second-header\">\n          What is your main agenda today {agendaContext.username.toUpperCase()} ?\n          <Theme />\n        </div>\n        <p className=\"error-msg\">{agendaContext.error}</p>\n\n        <Agendas />\n      </>\n    );\n  } else {\n    content = <Login />;\n  }\n\n  return <div>{content}</div>;\n};\n\nexport default Home;\n","import React, { useContext } from 'react';\n\nimport LandingPage from './LandingPage';\nimport Home from './Home';\nimport './app.css';\nimport AgendaContext from './context/AgendaContext';\n\nconst App = () => {\n  const agendaContext = useContext(AgendaContext);\n\n  return (\n    <>\n      <div className={`app ${agendaContext.theme ? agendaContext.theme : ''}`}>\n        <LandingPage />\n        <Home />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    GET_SESSION,\n    SET_SESSION,\n    GET_THEME,\n    SET_THEME,\n    GET_TODO,\n    SET_TODO,\n    UPDATE_TODO,\n    TOGGLE_TODO,\n    DELETE_TODO,\n    SET_LOGOUT,\n    STATUS_FILTER,\n    ORDER_FILTER,\n    REFRESH_TASKS,\n    REPORT_ERROR,\n    DONE_FILTER,\n    NETWORK_ERROR\n} from './types';\n\nimport constants from './Constants';\n\nexport default (state, action) => {\n    state = { ...state, error: '', networkError: '' };\n    switch (action.type) {\n        case GET_SESSION:\n            if (!action.data.username) {\n                return {\n                    ...state,\n                    isLoggedIn: constants.FALSE,\n                }\n            }\n            return {\n                ...state,\n                isLoggedIn: constants.TRUE,\n                username: action.data.username,\n                theme: action.data.theme\n            }\n        case SET_SESSION:\n            return {\n                ...state,\n                username: action.data,\n                isLoggedIn: constants.TRUE\n            }\n        case SET_LOGOUT:\n            return {\n                ...state,\n                isLoggedIn: constants.FALSE,\n                tasks: {},\n                theme: constants.DEFAULT_THEME\n            }\n        case GET_THEME:\n            return {\n                ...state,\n                theme: action.data\n            }\n        case SET_THEME:\n            return {\n                ...state,\n                theme: action.data\n            }\n        case GET_TODO:\n            return {\n                ...state,\n                tasks: action.data\n            }\n        case SET_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: {\n                        name: action.data.name,\n                        done: action.data.done,\n                        taskId: action.data.taskId\n                    }\n                }\n            }\n        case TOGGLE_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: { ...action.data }\n                }\n            }\n        case DELETE_TODO:\n            return {\n                ...state,\n                tasks: action.data\n            }\n        case UPDATE_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: { ...action.data, name: action.data.name }\n                }\n            }\n        case STATUS_FILTER:\n            return {\n                ...state,\n                taskStatusFilter: action.data\n            }\n        case ORDER_FILTER:\n            return {\n                ...state,\n                taskOrderFilter: action.data\n            }\n        case REFRESH_TASKS:\n            return {\n                ...state,\n                taskStatusFilter: constants.ALL,\n                taskOrderFilter: constants.SELECT,\n                taskDoneFilter: constants.SELECT\n            }\n        case DONE_FILTER:\n            return {\n                ...state,\n                taskDoneFilter: action.data.status,\n                taskStatusFilter: constants.ALL,\n                taskOrderFilter: constants.SELECT,\n            }\n        case REPORT_ERROR:\n            return {\n                ...state,\n                error: action.data,\n            }\n        case NETWORK_ERROR:\n            return {\n                ...state,\n                networkError: action.data,\n                isLoggedIn: constants.FALSE\n            }\n        default:\n            return state;\n    }\n};\n\n","export const SET_SESSION = 'SET_SESSION';\nexport const GET_SESSION = 'GET_SESSION';\nexport const SET_LOGOUT = 'SET_LOGOUT';\nexport const SET_THEME = 'SET_THEME';\nexport const GET_THEME = 'GET_THEME';\nexport const SET_TODO = 'SET_TODO';\nexport const GET_TODO = 'GET_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const STATUS_FILTER = 'STATUS_FILTER';\nexport const ORDER_FILTER = 'ORDER_FILTER';\nexport const REFRESH_TASKS = 'REFRESH_TASKS';\nexport const REPORT_ERROR = 'REPORT_ERROR';\nexport const NETWORK_ERROR = 'NETWORK_ERROR';\nexport const DONE_FILTER = 'DONE_FILTER';","const convertNetworkError = (err) => {\n    return {\n        code: 'NETWORK-ERROR',\n        err\n    };\n};\n\nconst checkResponse = (response) => {\n    if (!response.ok) {\n        return response.json().then((err) => Promise.reject(err));\n    }\n    return response.json();\n}\n\nexport const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n        .catch(convertNetworkError)\n        .then((checkResponse))\n};\n\nexport const fetchLogin = (username) => {\n    return fetch('/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ username }),\n    })\n        .catch(convertNetworkError)\n        .then((checkResponse))\n};\n\nexport const fetchLogout = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n    })\n        .catch(convertNetworkError)\n        .then((checkResponse))\n};\n\nexport const fetchTheme = (username) => {\n    return fetch(`/theme/${username}`, {\n        method: 'GET',\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n};\n\nexport const fetchUpdateTheme = (username, theme) => {\n    return fetch(`/theme/${username}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ theme }),\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n};\n\nexport const fetchAllTasks = (username) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'GET',\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n}\n\nexport const fetchAddTasks = (username, task) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ task })\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n};\n\nexport const fetchDeleteTask = (username, taskId) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'DELETE'\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n}\n\nexport const fetchUpdateTask = (username, taskId, task) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ task })\n    })\n        .catch(convertNetworkError)\n        .then(checkResponse)\n}","const messages = {\n    DEFAULT: 'Something went wrong, please try again!!!',\n    USERNAME_REQUIRED: '* Username is required',\n    NETWORK_ERROR: 'There was a problem reaching your network, please try again!!!',\n    TODO_REQUIRED: '*TODO cannot be empty!',\n    'no valid session': 'No Session found! Please login again.',\n    'login denied': '* Login required to see the content.',\n    'action not permitted': 'Unauthorized user. Please try valid username!!!',\n    'no tasks for user': 'No tasks found!!!',\n    'no such taskId': 'Error! Task does not exist.',\n    'failed to update': 'Failed to update task! Please enter correct data.',\n};\n\nexport default messages;\n","import React, { useReducer } from 'react';\nimport AgendaContext from './AgendaContext';\nimport AgendaReducer from './AgendaReducer';\nimport constants from './Constants';\nimport {\n    GET_SESSION,\n    SET_SESSION,\n    SET_LOGOUT,\n    GET_THEME,\n    SET_THEME,\n    GET_TODO,\n    SET_TODO,\n    TOGGLE_TODO,\n    UPDATE_TODO,\n    DELETE_TODO,\n    STATUS_FILTER,\n    ORDER_FILTER,\n    REFRESH_TASKS,\n    REPORT_ERROR,\n    DONE_FILTER,\n    NETWORK_ERROR\n} from './types';\n\nimport {\n    fetchLoginStatus,\n    fetchLogin,\n    fetchTheme,\n    fetchUpdateTheme,\n    fetchLogout,\n    fetchAllTasks,\n    fetchAddTasks,\n    fetchDeleteTask,\n    fetchUpdateTask\n} from '../services';\nimport messages from '../messages';\n\nconst AgendaState = (props) => {\n\n\n\n    const initialState = {\n        isLoggedIn: false,\n        username: '',\n        theme: '',\n        tasks: {},\n        taskOrderFilter: constants.SELECT,\n        taskStatusFilter: constants.ALL,\n        taskDoneFilter: constants.SELECT,\n        error: '',\n        networkError: ''\n    }\n\n\n\n    const [state, dispatch] = useReducer(AgendaReducer, initialState);\n\n    const getLoginStatus = () => {\n        fetchLoginStatus().then((userInfo) => {\n            dispatch({ type: GET_SESSION, data: userInfo.data });\n        })\n            .catch(err => {\n                dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const setLoginStatus = (username) => {\n        if (!username) {\n            dispatch({ type: NETWORK_ERROR, data: messages.USERNAME_REQUIRED });\n        } else {\n            fetchLogin(username)\n                .then(() => {\n                    dispatch({ type: SET_SESSION, data: username });\n                })\n                .catch(err => {\n                    dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n                });\n        }\n    }\n\n    const setLogout = () => {\n        fetchLogout()\n            .then(() => {\n                dispatch({ type: SET_LOGOUT })\n            })\n            .catch(err => {\n                dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const getTheme = (username) => {\n        fetchTheme(username).then((themeInfo) => {\n            dispatch({ type: GET_THEME, data: themeInfo.data })\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const setTheme = (username, themeVal) => {\n        fetchUpdateTheme(username, themeVal).then(() => {\n            dispatch({ type: SET_THEME, data: themeVal })\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const getAllTasks = (username) => {\n        fetchAllTasks(username).then((taskInfo) => {\n            dispatch({ type: GET_TODO, data: taskInfo.data });\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const addNewTask = (username, taskName) => {\n        const task = {\n            name: taskName,\n            done: false\n        }\n        if (!taskName) {\n            dispatch({ type: REPORT_ERROR, data: messages.TODO_REQUIRED });\n        }\n        else {\n            fetchAddTasks(username, task)\n                .then((taskInfo) => {\n                    dispatch({ type: SET_TODO, data: taskInfo.data });\n                })\n                .catch(err => {\n                    dispatch({ type: NETWORK_ERROR, data: messages[err.message] });\n                });\n        }\n    }\n\n    const toggleTodo = (id) => {\n        state.tasks[id].done = !state.tasks[id].done;\n        const task = state.tasks[id];\n        fetchUpdateTask(state.username, id, task)\n            .then((taskInfo) => {\n                dispatch({ type: TOGGLE_TODO, data: taskInfo.data })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const deleteTask = (id) => {\n        fetchDeleteTask(state.username, id)\n            .then((task) => {\n                const remove = removeTaskByKey(task.data)\n                dispatch({ type: DELETE_TODO, data: remove })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const removeTaskByKey = (task) => {\n        return Object.assign(\n            {},\n            ...Object.entries(state.tasks)\n                .filter(([k]) => k !== task.taskId)\n                .map(([k, v]) => ({ [k]: v })));\n    }\n\n    const updateTask = (id, text) => {\n        const task = state.tasks[id];\n        state.tasks[id].name = text;\n        fetchUpdateTask(state.username, id, task)\n            .then((taskInfo) => {\n                dispatch({ type: UPDATE_TODO, data: taskInfo.data })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const filterTasksByStatus = (status) => {\n        dispatch({ type: STATUS_FILTER, data: status })\n    }\n\n    const sortTasksByOrder = (status) => {\n        let tasks = '';\n        if (status === constants.ASCENDING) {\n            tasks = sortTasksByAsc();\n        } else if (status === constants.DESCENDING) {\n            tasks = sortTasksByDesc();\n        }\n        state.tasks = getObjectList(tasks);\n        dispatch({ type: ORDER_FILTER, data: status })\n    }\n\n    const sortTasksByAsc = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            }\n            else if (a.name > b.name) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        })\n    };\n\n    const sortTasksByDesc = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.name < b.name) {\n                return 1;\n            }\n            else if (a.name > b.name) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    };\n\n    const getObjectList = (list) => {\n        let task = {};\n        return list.reduce((obj, item) => {\n            return {\n                ...obj,\n                [item.taskId]: item,\n            };\n        }, task);\n    }\n\n    const refreshTasks = () => {\n        dispatch({ type: REFRESH_TASKS });\n    }\n\n    const sortTasksByDone = (status) => {\n        let tasks = {};\n        if (status === constants.DONE) {\n            tasks = sortByDone();\n        } else if (status === constants.NOTDONE) {\n            tasks = sortByNotDone();\n        }\n        state.tasks = getObjectList(tasks);\n        dispatch({ type: DONE_FILTER, data: status });\n    }\n\n    const sortByDone = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.done < b.done) {\n                return 1;\n            }\n            else if (a.done > b.done) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n\n    const sortByNotDone = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.done < b.done) {\n                return -1;\n            }\n            else if (a.done > b.done) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n\n    return (\n        <AgendaContext.Provider\n            value={{\n                isLoggedIn: state.isLoggedIn,\n                username: state.username,\n                theme: state.theme,\n                tasks: state.tasks,\n                taskOrderFilter: state.taskOrderFilter,\n                taskStatusFilter: state.taskStatusFilter,\n                taskDoneFilter: state.taskDoneFilter,\n                error: state.error,\n                networkError: state.networkError,\n                getLoginStatus,\n                setLoginStatus,\n                setTheme,\n                getTheme,\n                setLogout,\n                getAllTasks,\n                addNewTask,\n                toggleTodo,\n                deleteTask,\n                updateTask,\n                filterTasksByStatus,\n                sortTasksByOrder,\n                refreshTasks,\n                sortTasksByDone\n            }}\n        >\n            {props.children}\n        </AgendaContext.Provider>\n    )\n}\n\nexport default AgendaState;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AgendaState from './context/AgendaState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgendaState>\n      <App />\n    </AgendaState>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}